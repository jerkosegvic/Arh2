// ====================== PRIBAVI =======================
fetch0: a_sel=7, b_sel=7, alu_sel=OR, mar_sel=LOAD; // MAR <- PC
fetch1: ir1_sel=LOAD, read, if wait then goto fetch1 endif; // IR_high <- MEM(MAR)
fetch2: a_sel=7, c_in, alu_sel=ADDA, r7_write; // PC <- PC+1
fetch3: a_sel=7, b_sel=7, alu_sel=OR, mar_sel=LOAD; // MAR <- PC
fetch4: ir0_sel=LOAD, read, if wait then goto fetch4 endif; // IR_low <- MEM(MAR)
fetch5: a_sel=7, c_in, alu_sel=ADDA, r7_write, goto opcode[IR_OPCODE]; // PC <- PC+1
// ============= DIO OPERACIJSKIH KODOVA =============
// 0) NOP
opcode[0]: goto fetch0;
// 1) LOAD_IMMEDIATE (ri <- ir_const8)
opcode[1]: result_sel=IR_CONST8, ri_sel, goto fetch0;
// 2) ADD (ri <- rj + rk)
opcode[2]: ri_sel, rj_sel, rk_sel, alu_sel=ADD, if m_7 then goto opcode2.1 else goto opcode2.2 endif;
// 3) HALT
opcode[3]: goto opcode[3];
// 4) MOVE ri rj
opcode[4]: rj_sel, alu_sel=ADDA, ri_sel, goto fetch0;
// 5) LOAD ri addr
opcode[5]: result_sel=IR_CONST8, r4_write, goto opcode5.1;
// 6) STORE rj MEM(rk)
opcode[6]: rj_sel, alu_sel=ADDA, mdr_sel=LOAD_ALU, goto opcode6.1;
// 7) JUMP addr
opcode[7]: result_sel=IR_CONST8, r7_write, goto fetch0;
// 8) JZ rj, rk ==> akoe je rj == 0 --> PC <-rk
opcode[8]: rj_sel, alu_sel = ADDA, if m_7 then goto fetch0 else goto opcode8.1 endif;
// 9) SUB ri, rj, rk
opcode[9]: ri_sel, rj_sel, rk_sel, alu_sel=SUB, if m_7 then goto opcode9.1 else goto opcode9.2 endif;
// 10) SHL ri, rj
opcode[10]: rj_sel, alu_sel=ADDA, r4_write goto opcode10.1;
// 11) LDSP konst
opcode[11]: result_sel=IR_CONST8, r5_write, goto fetch0;
// 12) PUSH rj
opcode[12]: rj_sel, alu_sel=ADDA, mdr_sel=LOAD_ALU, goto opcode12.1;

// 13) JZ rj, rk ==> ako je rj == 0 --> PC <-rk #2. verzija
opcode[13]: rj_sel, alu_sel=NOT, r4_write goto opcode13.1; 


// ================= DIO EKSTENZIJE ================
// postavi zastavicu N
opcode2.1: a_sel=4, b_sel=4, alu_sel=XOR, r4_write; // pomocni registar r4 <- 0
a_sel=4, c_in, alu_sel=ADDA, r6_write, goto fetch0; // r4=0 + c_in=1 -> r6 (SR)
// obrisi zastavicu N
opcode2.2: a_sel=4, b_sel=4; alu_sel=XOR, r4_write; // pomocni registar r4 <- 0
a_sel=4, alu_sel=ADDA, r6_write, goto fetch0; // r4=0 -> r6 (SR)

opcode5.1: a_sel=4, b_sel=4, alu_sel=OR, mar_sel=LOAD, goto opcode5.2;
opcode5.2: mdr_sel=LOAD_MEM, read, if wait then goto opcode5.2 endif;
result_sel=MDR, ri_sel, goto fetch0;

opcode6.1: rk_sel, alu_sel=ADDA, mar_sel=LOAD, goto opcode6.2;
opcode6.2: write, if wait then goto opcode6.2 endif;
goto fetch0;

opcode8.1: rj_sel, alu_sel = SUBA, if m_7 then goto opcode8.2 else goto fetch0 endif;
opcode8.2: rk_sel, rj_sel, alu_sel=ADD, r7_write, goto fetch0;

opcode9.1: a_sel=4, b_sel=4, alu_sel=XOR, r4_write; // pomocni registar r4 <- 0
a_sel=4, c_in, alu_sel=ADDA, r6_write, goto fetch0; // r4=0 + c_in=1 -> r6 (SR)
// obrisi zastavicu N
opcode9.2: a_sel=4, b_sel=4; alu_sel=XOR, r4_write; // pomocni registar r4 <- 0
a_sel=4, alu_sel=ADDA, r6_write, goto fetch0; // r4=0 -> r6 (SR)

opcode10.1: rj_sel, b_sel=4, ri_sel, alu_sel=ADD, goto fetch0;

opcode12.1: a_sel=5, alu_sel=ADDA, mar_sel=LOAD, goto opcode12.2;
opcode12.2: write, if wait then goto opcode12.2 endif;
a_sel=5, alu_sel=SUBA, r5_write, goto fetch0;

opcode13.1: a_sel=4, c_in, alu_sel=ADDA, if c_out then goto opcode13.2 else goto fetch0 endif;
opcode13.2: rk_sel, rj_sel, alu_sel=ADD, r7_write, goto fetch0;

